From c5bb468ea1c24e1176b9b9d6d9c226fe1c10e1ca Mon Sep 17 00:00:00 2001
From: FindHao <yhao24@ncsu.edu>
Date: Fri, 30 Apr 2021 15:34:12 -0400
Subject: [PATCH] add opt

---
 lib/kokkos/bin/nvcc_wrapper           |  2 +-
 src/KOKKOS/atom_vec_atomic_kokkos.cpp | 35 +++++++++++++++++++++++++--
 src/KOKKOS/atom_vec_atomic_kokkos.h   |  1 +
 3 files changed, 35 insertions(+), 3 deletions(-)

diff --git a/lib/kokkos/bin/nvcc_wrapper b/lib/kokkos/bin/nvcc_wrapper
index 4ecf4c66d..a2639b606 100755
--- a/lib/kokkos/bin/nvcc_wrapper
+++ b/lib/kokkos/bin/nvcc_wrapper
@@ -41,7 +41,7 @@ cpp_files=""
 xcompiler_args=""
 
 # Cuda (NVCC) only arguments
-cuda_args=""
+cuda_args="-lineinfo"
 
 # Arguments for both NVCC and Host compiler
 shared_args=""
diff --git a/src/KOKKOS/atom_vec_atomic_kokkos.cpp b/src/KOKKOS/atom_vec_atomic_kokkos.cpp
index 71452e363..4f9015aac 100644
--- a/src/KOKKOS/atom_vec_atomic_kokkos.cpp
+++ b/src/KOKKOS/atom_vec_atomic_kokkos.cpp
@@ -81,6 +81,37 @@ void AtomVecAtomicKokkos::grow(int n)
       modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);
 }
 
+
+void AtomVecAtomicKokkos::grow_cache(int n, float rate)
+{
+  auto DELTA = LMP_KOKKOS_AV_DELTA;
+  int step = MAX(DELTA,nmax*rate);
+  if (n == 0) nmax += step;
+  else nmax = n;
+  atomKK->nmax = nmax;
+  if (nmax < 0 || nmax > MAXSMALLINT)
+    error->one(FLERR,"Per-processor system is too big");
+
+  atomKK->sync(Device,ALL_MASK);
+  atomKK->modified(Device,ALL_MASK);
+
+  memoryKK->grow_kokkos(atomKK->k_tag,atomKK->tag,nmax,"atom:tag");
+  memoryKK->grow_kokkos(atomKK->k_type,atomKK->type,nmax,"atom:type");
+  memoryKK->grow_kokkos(atomKK->k_mask,atomKK->mask,nmax,"atom:mask");
+  memoryKK->grow_kokkos(atomKK->k_image,atomKK->image,nmax,"atom:image");
+
+  memoryKK->grow_kokkos(atomKK->k_x,atomKK->x,nmax,"atom:x");
+  memoryKK->grow_kokkos(atomKK->k_v,atomKK->v,nmax,"atom:v");
+  memoryKK->grow_kokkos(atomKK->k_f,atomKK->f,nmax,"atom:f");
+
+  grow_pointers();
+  atomKK->sync(Host,ALL_MASK);
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);
+}
+
 /* ----------------------------------------------------------------------
    reset local array ptrs
 ------------------------------------------------------------------------- */
@@ -394,7 +425,7 @@ struct AtomVecAtomicKokkos_UnpackBorder {
 void AtomVecAtomicKokkos::unpack_border_kokkos(const int &n, const int &first,
                      const DAT::tdual_xfloat_2d &buf,ExecutionSpace space) {
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK);
-  while (first+n >= nmax) grow(0);
+  while (first+n >= nmax) grow_cache(0, 0.8);
   atomKK->modified(space,X_MASK|TAG_MASK|TYPE_MASK|MASK_MASK);
   if (space==Host) {
     struct AtomVecAtomicKokkos_UnpackBorder<LMPHostType> f(buf.view<LMPHostType>(),h_x,h_tag,h_type,h_mask,first);
@@ -795,7 +826,7 @@ void AtomVecAtomicKokkos::create_atom(int itype, double *coord)
   if (nlocal == nmax) {
     //if(nlocal>2) printf("typeA: %i %i\n",type[0],type[1]);
     atomKK->modified(Host,ALL_MASK);
-    grow(0);
+    grow_cache(0, 0.1);
     //if(nlocal>2) printf("typeB: %i %i\n",type[0],type[1]);
   }
   atomKK->modified(Host,ALL_MASK);
diff --git a/src/KOKKOS/atom_vec_atomic_kokkos.h b/src/KOKKOS/atom_vec_atomic_kokkos.h
index 2c682d498..dec8733fb 100644
--- a/src/KOKKOS/atom_vec_atomic_kokkos.h
+++ b/src/KOKKOS/atom_vec_atomic_kokkos.h
@@ -32,6 +32,7 @@ class AtomVecAtomicKokkos : public AtomVecKokkos {
   AtomVecAtomicKokkos(class LAMMPS *);
   virtual ~AtomVecAtomicKokkos() {}
   void grow(int);
+  void grow_cache(int, float);
   void copy(int, int, int);
   int pack_border(int, int *, double *, int, int *);
   int pack_border_vel(int, int *, double *, int, int *);
-- 
2.25.1

